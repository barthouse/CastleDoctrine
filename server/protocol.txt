All returns are whitespace-delimited.



Most calls can return 'DENIED' on failure




=== Call:
server.php?action=check_user&email=[signup email address]

Returns:
minVersionNumber
userID
sequenceNumber
OK

Where:
minVersionNumber = minimum client version number compatible with this server
userID = unique user ID number
sequenceNumber = sequence number for sha1 secure hashing of download keys
                 to sign future transactions.  Any transactions using
                 lower sequence numbers will be denied as stale replays. 




== General Note:
To verify the identity of the user making each transaction, a hash of
that user's original download ticket ID is included with the transaction call.
That hash is constructed in the following way:

  sha1( download_ticket_id . sequence_number )

Where the download ticket ID is concatonated with the ascii, base-10 
representation of the sequence number.

Each transaction updates the sequence number associated with the user on
the server.  Each subsequent transaction must use a new sequence number to
thwart replay attacks.

Thus, the ticket ID is never sent from the client to the server, yet the
server can verify that the client making the transaction is indeed in 
possession of the ticket ID (which only one person in the world should have).




=== Call:
server.php?action=check_hash&user_id=[id number]
                            &sequence_number=[number]
                            &ticket_hash=[sha1 hash, hex-encoded]
Returns:
OK





=== Call:
server.php?action=start_edit_house&user_id=[id number]
                                  &sequence_number=[number]
                                  &ticket_hash=[sha1 hash, hex-encoded]
Returns:
houseMap
vault_contents
backpack_contents
price_list
current_balance
OK

Where:
houseMap = ASCII string representing the house layout, like:

object_id#object_id#object_id#object_id

OR

object_id:state#object_id:state#object_id#object_id

If ":state" not present, then default state is implied
If ":state" includes "!" at the end, that marks a stuck state.
Example:  100:2!#10:3!#5#3:0

Cells are separated by "#"

Multiple objects can be present in each cell, separated by commas, like this:

object_id:state#object_id:state,object_id:state#object_id#object_id,object_id

Note that this is used to encode the presense of mobile objects (which can
 share a cell with non-mobile, non-blocking objects)



vault_contents = ASCII string containing ID:quantity pairs, like:

101:3#3:10#5:1#102:1

(If empty, string is a single "#")


backpack_contents = ASCII string, same format as vault_contents



price_list = ASCII string containing ID@price pairs, like:

LIST_NUMBER:1@10#2@20#5@25:SIGNATURE

Where SIGNATURE is computed as follows:

sha1( LIST_NUMBER . list_body . server_secret )

Where "." is concatonate.

Each LIST_NUMBER can only be used once by a given user in a house 
modification, and then it becomes stale.

And:
current_balance = player's current money balance in whole dollars.





=== Call:
server.php?action=end_edit_house&user_id=[id number]
                                &sequence_number=[number]
                                &ticket_hash=[sha1 hash, hex-encoded]
								&died=[0 or 1]
                                &house_map=[house map ASCII string]
                                &vault_contents=[vault contents ASCII string]
                                &backpack_contents=[bp contents ASCII string]
                                &price_list=[price list ASCII string]
                                &edit_list=[edit list ASCII string]
                                &purchase_list=[purchase list ASCII string]
Returns:
OK


Where:

died is 1 if player died while testing house

vault_contents and backpack_contents take the same format as the return values
of start_edit_house.

price_list is the list returned by start_edit_house


edit_list is encoded as follows:

object_id@index#object_id@index#object_id@index#object_id@index

Where object_id is the id of the object placed, and index is the position
in the house map.


purchase_list is encoded as a series of ID:quantity pairs, like:

101:3#3:10#5:1#102:1

(If empty, string is a single "#")




=== Call:
server.php?action=ping_house&user_id=[id number]
                            &sequence_number=[number]
                            &ticket_hash=[sha1 hash, hex-encoded]
Returns:
OK
or
FAILED  (in the case of a house that has gone stale and can't be pinged)

Note:
Proves that house is still being actively edited or robbed, keeping the
house checked out.  Without regular pings, the house will time out
and automatically check back in.  Houses are considered stale after 5
minutes of no pings.

user_id is the owner in the case of a house being edited,
and user_id is the robber in the case of a house being robbed.




=== Call:
server.php?action=list_houses&user_id=[id number]
                             &skip=[number]
                             &limit=[number]
                             &sequence_number=[number]
                             &ticket_hash=[sha1 hash, hex-encoded]
Returns:
user_id#character_name#last_robber_name#loot_value#rob_attempts
user_id#character_name#last_robber_name#loot_value#rob_attempts
user_id#character_name#last_robber_name#loot_value#rob_attempts
user_id#character_name#last_robber_name#loot_value#rob_attempts
....
OK

Where:
character_name and last_robber_name have spaces repaced by "_"

Note:
Lists only robbable houses.
Returns at most [limit] houses, skipping the first [skip] houses.
House owned by user_id is skipped.
If last_robber is user_id, last_robber_name is set to "You".




=== Call:
server.php?action=start_rob_house&user_id=[id number]
                                 &to_rob_user_id=[id number]
                                 &sequence_number=[number]
                                 &ticket_hash=[sha1 hash, hex-encoded]
Returns:
character_name
houseMap
backpack_contents
OK

Where:
character_name has spaces repaced by "_"
houseMap = ASCII string representing the house layout
backpack_contents = ASCII string encoded as described for start_edit_house





=== Call:
server.php?action=end_rob_house&user_id=[id number]
                               &sequence_number=[number]
                               &ticket_hash=[sha1 hash, hex-encoded]
                               &success=[0 or 1(reach vault) or 2(chicken out)]
							   $backpack_contents=[contents as ASCII string]
                               &move_list=[move list as ASCII string]
                               &house_map=[house map ASCII string]
Returns:
dollar_value
OK


Where:


move_list is encoded as follows:

List of moves separated by # where a move is either:
mX   (where X is the index of move destination)
or
tW@X (where W is the tool ID and X is the index of the tool target)

move_list example:

m328#m329#m297#t500@298#m297


Note:
dollar_value 0 on failure
backpack_contents is what's left over in backpack after robbery ends




=== Call:
server.php?action=list_loggged_robberies&user_id=[id number]
                                        &skip=[number]
                                        &limit=[number]
                                        &sequence_number=[number]
                                        &ticket_hash=[sha1 hash, hex-encoded]
Returns:
log_id#character_name#last_robber_name#loot_value#rob_attempts
log_id#character_name#last_robber_name#loot_value#rob_attempts
log_id#character_name#last_robber_name#loot_value#rob_attempts
log_id#character_name#last_robber_name#loot_value#rob_attempts
....
OK

Where:
character_name and last_robber_name have spaces repaced by "_"

Note:
Lists only logged successful robberies, where last_robber_name is the name
of the successful robber, and loot_value is the value of loot taken.
Returns at most [limit] houses, skipping the first [skip] houses.
If robber or victim is user_id, corresponding "_name" field is set to "You".




=== Call:
server.php?action=get_robbery_log&user_id=[id number]
                                 &sequence_number=[number]
                                 &ticket_hash=[sha1 hash, hex-encoded]
                                 &log_id=[id_number]
Returns:
robber_name
victim_name
houseMap
backpack_contents
moveList
loot_value
OK

Where:
robber_name and victim_name have spaces repaced by "_"
houseMap = ASCII string representing the house layout
backpack_contents = ASCII string representing loadout
moveList = ASCII string representing moves made


Note:
If robber or victim is user_id, corresponding "_name" field is set to "You".


